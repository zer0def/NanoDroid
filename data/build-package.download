#!/bin/bash

# Functions borrowed or derived from
# Michael Bryant / Shadow53
# https://gitlab.com/Shadow53/android-zip-builder

repo_fdroid="https://f-droid.org/repo"
repo_guardian="https://guardianproject.info/fdroid/repo"
repo_microg="https://microg.org/fdroid/repo"
repo_bromite="https://fdroid.bromite.org/fdroid/repo"
repo_cromite="https://www.cromite.org/fdroid/repo"
repo_ogapps="https://gitlab.opengapps.org/opengapps"
repo_newpipe="https://archive.newpipe.net/fdroid/repo"
repo_mollyfoss="https://molly.im/fdroid/foss/fdroid/repo"
repo_briar="https://briarproject.org/fdroid/repo"
repo_divestos="https://divestos.org/fdroid/official"
repo_spiritcroc="https://s2.spiritcroc.de/fdroid/repo"
repo_izzysoft="https://apt.izzysoft.de/fdroid/repo"
repo_frostnerd="https://fdroid.frostnerd.com/fdroid/repo"
repo_breezyweather="https://breezy-weather.github.io/fdroid-repo/fdroid-version/fdroid/repo"
repo_twinhelix="https://fdroid.twinhelix.com/fdroid/repo"
repo_petercxy="https://fdroid.typeblog.net"
repo_onionshare="https://raw.githubusercontent.com/onionshare/onionshare-android-nightly/master/fdroid/repo"
repo_lublin="https://lublin.se/fdroid/repo"
repo_skyjake="https://skyjake.github.io/fdroid/repo"
repo_futo="https://app.futo.org/fdroid/repo"
repo_kaffemitkoffein="https://kaffeemitkoffein.de/fdroid/repo"

useragent='Mozilla/5.0 (Windows NT 10.0; rv:109.0) Gecko/20100101 Firefox/115.0'

if [ "${BP_DEBUG}" = '1' ]; then
	wget_opts="-v --show-progress"
	curl_opts="-vSL"
else
	wget_opts="-q"
	curl_opts="-sSL"
fi

# check dependencies
for dep in gawk curl jq zstd grep; do
	if ! which "${dep}" &>/dev/null; then
		echo "${dep} is not installed!"
		exit 1
	fi
done

zstd_apk () {
	[ -f "${1}" ] && \
		zstd -1fq --rm "${1}" || \
		echo "error downloading ${1}"
}

msg_no_checksum () {
	echo -e "\tChecking SHA256 hash not supported"
}

msg_apk_update () {
	if [ -f "${1}.zst" ]; then
		echo -e "\nUpdating from ${2}        : $(basename "${1}") ${3}"
	else	echo -e "\nDownloading from ${2}     : $(basename "${1}") ${3}"
	fi
}

msg_download_info () {
	case "${1}" in
		sideload)
			echo -e "\nSideloading APK           : ${2} ${3}"
			msg_no_checksum
		;;
		github)
			msg_apk_update "${2}" "GitHub"
			msg_no_checksum
		;;
		gitlab)
			msg_apk_update "${2}" "GitLab"
			msg_no_checksum
		;;
		opengapps)
			msg_apk_update "${2}" "OpenGApps" "${3}"
			msg_no_checksum
		;;
		url)
			msg_apk_update "${2}" "URL"
			msg_no_checksum
		;;
	esac
}

download_apk_common () {
	local apk_dest="${1}"
	local apk_name="${2}"
	local apk_url="${3}"
	local msg_type="${4}"
	[ -n "${5}" ] && local sdk_ver="[${5}]"

	mkdir -p "${apk_dest}"

	if [ -f "${sideload}/${apk_name}.apk" ]; then
		msg_download_info sideload "${apk_dest}/${apk_name}.apk" "${sdk_ver}"
		cp "${sideload}/${apk_name}.apk" "${apk_dest}/${apk_name}.apk"
	else
		msg_download_info "${msg_type}" "${apk_dest}/${apk_name}.apk" "${sdk_ver}"
		debug_download delete "${apk_dest}/${apk_name}.apk" "${apk_url}" "${apk_dest}/${apk_name}.apk"
	fi

	zstd_apk "${apk_dest}/${apk_name}.apk"
}

debug_download () {
	case "${1}" in
		index)
			if [ "${BP_USE_WGET}" = '1' ]; then
				rm -rf "${2}"
				debug_message normal "wget ${wget_opts} \"${3}\" -O \"${2#${CWD}/}\"" " "
				wget ${wget_opts} -U "${useragent}" "${3}" -O "${2}" || error "${4}"
			else
				debug_message normal "curl ${curl_opts} \"${2#${CWD}/}\" \"${3}\"" " "
				curl ${curl_opts} -A "${useragent}" -o "${2}" "${3}" || error "${4}"
			fi
		;;
		no_delete)
			if [ "${BP_USE_WGET}" = '1' ]; then
				rm -rf "${2}"
				debug_message normal "wget ${wget_opts} \"${3}\" -O \"${2#${CWD}/}\""
				wget ${wget_opts} -U "${useragent}" "${3}" -O "${2}"
			else
				debug_message normal "curl ${curl_opts} -SL -o \"${2#${CWD}/}\" \"${3}\""
				curl ${curl_opts} -A "${useragent}" -o "${2}" "${3}"
			fi
		;;
		delete)
			if [ "${BP_USE_WGET}" = '1' ]; then
				rm -rf "${2}"
				debug_message normal "wget ${wget_opts} \"${3}\" -O \"${2#${CWD}/}\""
				wget ${wget_opts} -U "${useragent}" "${3}" -O "${2}" || rm -f "${4}"
			else
				debug_message normal "curl ${curl_opts} -SL -o \"${2#${CWD}/}\" \"${3}\""
				curl ${curl_opts} -A "${useragent}" -o "${2}" "${3}" || rm -f "${4}"
			fi
		;;
	esac
}

index_update_required () {
	index_file="${1}"

	test ! -f "${index_file}" && return 0
	test "$(${statx} "${index_file}")" -le "$(("$(date +%s)" - 3600))" && return 0
	test "$(file -b "${index_file}")" == "empty" && return 0

	return 1
}

check_sha256sum () {
	local input="${1}"

	local in_checksum=""
	local ex_checksum="${2}"

	case "${input}" in
		*.zst )
			in_checksum="$(zstd -dcf "${input}" 2>/dev/null | "${sumsha256}" | gawk '{print $1}')"
		;;

		* )
			in_checksum="$("${sumsha256}" "${input}" 2>/dev/null | gawk '{print $1}')"
		;;
	esac

	[[ "${in_checksum}" == "${ex_checksum}" ]] && return 0 || return 1
}

update_index () {
	local index_jar="${1}"
	local index_json="${repofolder}/$(basename "${index_jar}" .jar).json"
	local index_repo="${2}"

	if index_update_required "${index_json}"; then
		debug_download index "${index_jar}" "${index_repo}/index-v1.jar" " failed to update repo index"

		unzip -q "${index_jar}" index-v1.json -d "${repofolder}/"
		mv "${repofolder}/index-v1.json" "${index_json}"
		rm -f "${index_jar}"
	fi
}

update_indices () {
	echo "+++ upating Repo Indices"
	echo " ++ F-Droid"
	[ ! -d "${repofolder}" ] && rm -rf "${repofolder}" && mkdir -p "${repofolder}"
	update_index "${repofolder}/$(awk -F/ '{print $3}' <<< "${repo_fdroid}").index-v1.jar" "${repo_fdroid}"

	echo " ++ Guardian Project"
	update_index "${repofolder}/$(awk -F/ '{print $3}' <<< "${repo_guardian}").index-v1.jar" "${repo_guardian}"

	echo " ++ microG"
	update_index "${repofolder}/$(awk -F/ '{print $3}' <<< "${repo_microg}").index-v1.jar" "${repo_microg}"

	echo " ++ Cromite"
	update_index "${repofolder}/$(awk -F/ '{print $3}' <<< "${repo_cromite}").index-v1.jar" "${repo_cromite}"

	echo " ++ NewPipe"
	update_index "${repofolder}/$(awk -F/ '{print $3}' <<< "${repo_newpipe}").index-v1.jar" "${repo_newpipe}"

	echo " ++ Molly FOSS"
	update_index "${repofolder}/$(awk -F/ '{print $3}' <<< "${repo_mollyfoss}").index-v1.jar" "${repo_mollyfoss}"

	echo " ++ Briar"
	update_index "${repofolder}/$(awk -F/ '{print $3}' <<< "${repo_briar}").index-v1.jar" "${repo_briar}"

	echo " ++ DivestOS"
	update_index "${repofolder}/$(awk -F/ '{print $3}' <<< "${repo_divestos}").index-v1.jar" "${repo_divestos}"

	#echo " ++ FrostNerd (Nebulo)"
	#update_index "${repofolder}/$(awk -F/ '{print $3}' <<< "${repo_frostnerd}").index-v1.jar" "${repo_frostnerd}"

	echo " ++ IzzySoft"
	update_index "${repofolder}/$(awk -F/ '{print $3}' <<< "${repo_izzysoft}").index-v1.jar" "${repo_izzysoft}"

	echo " ++ SpiritCroc (SchildiChat)"
	update_index "${repofolder}/$(awk -F/ '{print $3}' <<< "${repo_spiritcroc}").index-v1.jar" "${repo_spiritcroc}"

	echo " ++ Breezy Weather"
	update_index "${repofolder}/$(awk -F/ '{print $3}' <<< "${repo_breezyweather}").index-v1.jar" "${repo_breezyweather}"

	echo " ++ TwinHelix (Signal-FOSS)"
	update_index "${repofolder}/$(awk -F/ '{print $3}' <<< "${repo_twinhelix}").index-v1.jar" "${repo_twinhelix}"

	echo " ++ PeterCxy (Shelter)"
	update_index "${repofolder}/$(awk -F/ '{print $3}' <<< "${repo_petercxy}").index-v1.jar" "${repo_petercxy}"

	echo " ++ OnionShare"
	update_index "${repofolder}/$(awk -F/ '{print $3}' <<< "${repo_onionshare}").index-v1.jar" "${repo_onionshare}"

	#echo " ++ Daniel Lublin (Mumla)"
	#update_index "${repofolder}/$(awk -F/ '{print $3}' <<< "${repo_lublin}").index-v1.jar" "${repo_lublin}"

	echo " ++ SkyJake (Lagrange)"
	update_index "${repofolder}/$(awk -F/ '{print $3}' <<< "${repo_skyjake}").index-v1.jar" "${repo_skyjake}"

	echo " ++ FUTO"
	update_index "${repofolder}/$(awk -F/ '{print $3}' <<< "${repo_futo}").index-v1.jar" "${repo_futo}"

	echo " ++ Kaffe Mit Koffein"
	update_index "${repofolder}/$(awk -F/ '{print $3}' <<< "${repo_kaffemitkoffein}").index-v1.jar" "${repo_kaffemitkoffein}"
}

grab_apk_from_repo () {
	case "${1}" in
		fdroid )
			local repo="${repo_fdroid}"
			local repo_p="F-Droid"
		;;
		guardian )
			local repo="${repo_guardian}"
			local repo_p="Guardian Project"
		;;
		microg )
			local repo="${repo_microg}"
			local repo_p="microG"
		;;
		cromite )
			local repo="${repo_cromite}"
			local repo_p="Cromite"
		;;
		newpipe )
			local repo="${repo_newpipe}"
			local repo_p="NewPipe"
		;;
		mollyfoss )
			local repo="${repo_mollyfoss}"
			local repo_p="Molly FOSS"
		;;
		briar )
			local repo="${repo_briar}"
			local repo_p="Briar"
		;;
		divestos )
			local repo="${repo_divestos}"
			local repo_p="DivestOS"
		;;
		#frostnerd )
		#	local repo="${repo_frostnerd}"
		#	local repo_p="FrostNerd"
		#;;
		izzysoft )
			local repo="${repo_izzysoft}"
			local repo_p="IzzySoft"
		;;
		spiritcroc )
			local repo="${repo_spiritcroc}"
			local repo_p="SpiritCroc"
		;;
		breezyweather )
			local repo="${repo_breezyweather}"
			local repo_p="Breezy Weather"
		;;
		twinhelix )
			local repo="${repo_twinhelix}"
			local repo_p="TwinHelix"
		;;
		petercxy )
			local repo="${repo_petercxy}"
			local repo_p="PeterCxy"
		;;
		onionshare )
			local repo="${repo_onionshare}"
			local repo_p="OnionShare"
		;;
		lublin )
			local repo="${repo_lublin}"
			local repo_p="Daniel Lublin"
		;;
		skyjake )
			local repo="${repo_skyjake}"
			local repo_p="SkyJake"
		;;
		futo )
			local repo="${repo_futo}"
			local repo_p="FUTO"
		;;
		kaffemitkoffein )
			local repo="${repo_kaffemitkoffein}"
			local repo_p="Kaffe Mit Koffein"
		;;
	esac

	local domain="$(awk -F/ '{print $3}' <<< "${repo}")"
	index_file="${repofolder}/${domain}.index-v1.json"

	local pkg_name="${2}"

	if [ -z "${5}" ]; then
		local apk_name="$(jq -r --arg pkg "${pkg_name}" '.packages[$pkg][0].apkName' "${index_file}")"
		local sha_sum="$(jq -r --arg pkg "${pkg_name}" '.packages[$pkg][0].hash' "${index_file}")"
	else
		local apk_name="$(jq -r --arg pkg "${pkg_name}" --arg arch "${5}" '[.packages[$pkg][] | select (.nativecode[]==$arch).apkName][0]' "${index_file}")"
		local sha_sum="$(jq -r --arg pkg "${pkg_name}" --arg arch "${5}" '[.packages[$pkg][] | select (.nativecode[]==$arch).hash][0]' "${index_file}")"
	fi

	case "${pkg_name}" in
		org.bromite.webview )
			local apk_dest="${appsfolder[12]}/${3}/${4}"
		;;

		us.spotco.mulch_wv )
			local apk_dest="${appsfolder[14]}/${3}/${4}"
		;;

		* )
			local apk_dest="${appsfolder[2]}/${3}/${4}"
		;;
	esac

	local apk_url="${repo}/${apk_name}"

	if [ -f "${sideload}/${4}.apk" ]; then
		echo -e "\nSideloading APK           : ${4}.apk"
		mkdir -p "${apk_dest}"
		rm -f "${apk_dest}/${4}.apk.zst"
		cp "${sideload}/${4}.apk" "${apk_dest}/${4}.apk"
		zstd_apk "${apk_dest}/${4}.apk"
	else
		if check_sha256sum "${apk_dest}/${4}.apk.zst" "${sha_sum}"; then
			echo -e "\nUp-to-Date from ${repo_p} : ${4}.apk"
		else	echo -e "\nUpdating from ${repo_p}   : ${4}.apk"
			mkdir -p "${apk_dest}"
			rm -f "${apk_dest}/${4}.apk.zst"
			debug_download no_delete "${apk_dest}/${4}.apk" "${apk_url}"

			if check_sha256sum "${apk_dest}/${4}.apk" "${sha_sum}"; then
				echo "	SHA256 hash of ${4}.apk is correct"
				zstd_apk "${apk_dest}/${4}.apk"
			else	echo -e "	SHA256 hash of ${4}.apk is wrong!\
				\n	expected	: ${sha_sum}\
				\n	got		: ${in_checksum}"
				rm -f "${apk_dest}/${4}.apk"
			fi
		fi
	fi
}

grab_apk_from_url () {
	local apk_url="${1}"
	local apk_dest="${appsfolder[2]}/${2}/${3}"

	download_apk_common "${apk_dest}" "${3}" "${apk_url}" url
}

grab_apk_from_github () {
	local jq_filter='.assets[0].browser_download_url'
	[ -z "${4}" ] || jq_filter=".assets[]|select(.name==\"${4}\").browser_download_url"
	[ "${BP_DEBUG}" = '1' ] && debug_message normal "curl ${curl_opts} -s -N \"https://api.github.com/repos/${1}/releases\""
	local apk_url="$(curl -A "${useragent}" -s "https://api.github.com/repos/${1}/releases/latest" | jq -r "${jq_filter}")"
	local apk_dest="${appsfolder[2]}/${2}/${3}"

	download_apk_common "${apk_dest}" "${3}" "${apk_url}" github
}

# try to download release asset ending with .apk
grab_apk_from_gitlab () {
	local namespace="$(echo $1 | cut -d "/" -f1)"
	local repo="$(echo $1 | cut -d "/" -f2)"

	[ "${BP_DEBUG}" = '1' ] && debug_message newline "curl ${curl_opts} -s -N \"https://gitlab.com/api/v4/projects/${namespace}%2F${repo}/releases/\"" "\n"
	local apk_url="$(curl -A "${useragent}" -s -N https://gitlab.com/api/v4/projects/${namespace}%2F${repo}/releases/ | jq -r '.[0].assets.links[].url' | grep '.apk')"
	local apk_dest="${appsfolder[2]}/${2}/${3}"

	download_apk_common "${apk_dest}" "${3}" "${apk_url}" gitlab
}

# aurora devs upload the finished apk in the release description instead of the assets so they get a custom downloader function
grab_aurora_apk_from_gitlab () {
	local namespace="$(echo $1 | cut -d "/" -f1)"
	local repo="$(echo $1 | cut -d "/" -f2)"

	[ "${BP_DEBUG}" = '1' ] && debug_message newline "curl ${curl_opts} -s -N \"https://gitlab.com/api/v4/projects/${namespace}%2F${repo}/releases/\"" "\n"
	local apk_path="$(curl -A "${useragent}" -s -N "https://gitlab.com/api/v4/projects/${namespace}%2F${repo}/releases/" | jq -r '.[0].description' | grep ".apk" | cut -d "(" -f2 | cut -d ")" -f1)"
	local apk_dest="${appsfolder[2]}/${2}/${3}"
	local apk_url="https://gitlab.com/${1}${apk_path}"

	download_apk_common "${apk_dest}" "${3}" "${apk_url}" gitlab
}
